package main;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import util.Feature;
import util.WeatherData;

public class InformationRatio 
{
	private HashMap<Integer,WeatherData> trainDataXMap = new HashMap<Integer,WeatherData>();
	private HashMap<Integer,WeatherData> trainDataYMap = new HashMap<Integer,WeatherData>();
    private HashMap<Integer,Double> gain_ratios_partitions = new HashMap<Integer,Double>();
    
	private  void calcInformationRatio(HashSet<WeatherData> trainDataX,HashSet<WeatherData> trainDataY,Feature attribute)
    {
    	int i=0;
    	double x=0.0,y=0.0;
    	int total_count_in_train = 0;
    	int count_rain_yes = 0;
    	int count_rain_no = 0;
    	boolean isRain = true;
    	for(WeatherData wd : trainDataX)
    	{
    		i++;
    		trainDataXMap.put(i, wd);    		
    	}
    	for(WeatherData wd : trainDataY)
    	{
    		i++;
    		trainDataYMap.put(i, wd);    		
    	}
    	total_count_in_train = trainDataX.size();
    	count_rain_yes = getCountsOfRain(trainDataYMap,true,total_count_in_train);
    			
        count_rain_no =  getCountsOfRain(trainDataYMap,false,total_count_in_train);
        
        x = count_rain_yes/total_count_in_train;
        y = count_rain_no/total_count_in_train;
        
    	double information_gain_System = getInformationGain(x,y);
    	for(int entry=0;i<trainDataXMap.size();entry++)
    	{
    		WeatherData wd = trainDataXMap.get(entry);
    		for(Feature fd : wd.getFeatures())
    		{
    			if (fd.getName() == attribute.getName())
    			{
    				int partitonElem = (Integer) fd.getValues().get(0);
    				double gainRatio = calc_gain_ratio(attribute.getName(),partitonElem,trainDataXMap,trainDataYMap);
    				gain_ratios_partitions.put(getKey(wd),gainRatio);
    			}
    		}
    		
    	}
    	
    	//HashMap<Integer,WeatherData> trainDataXMap_sorted = sort_trainingData(trainDataXMap,attribute);
        	
    }
	private Integer getKey(WeatherData value)
	{
	    for(Integer key : trainDataXMap.keySet())
	    {
	        if(trainDataXMap.get(key).equals(value))
	        {
	            return key; //return the first found
	        }
	    }
	    return null;
	}
	private double calc_gain_ratio(String attrb,int partitonElem,HashMap<Integer, WeatherData> trainDataXMap,HashMap<Integer, WeatherData> trainDataXMap )
	{
		HashMap<Integer,Integer> X_Train_attrb_part1 = new HashMap<Integer,Integer>();
		HashMap<Integer,Integer> X_Train_attrb_part2 = new HashMap<Integer,Integer>();
		for(int i=0;i<trainDataXMap.size();i++)
		{
			WeatherData wd = trainDataXMap.get(i);
			for(Feature f: wd.getFeatures())
			{
				if(f.getName() == attrb)
				{
					int attrb_val = (Integer)f.getValues().get(0);
					if(attrb_val <= partitonElem)
					{
						X_Train_attrb_part1.put(getKey(wd), attrb_val);
					}
					else
					{
						X_Train_attrb_part2.put(getKey(wd), attrb_val);
					}
				}
			}
		}
		
		
	}
	private int getCountsOfRain(HashMap<Integer,WeatherData> trainYData,boolean isRain,int total_cnt)
	{
		int rainYesCount = 0;
		for(int i=0;i<trainYData.size();i++)
		{
			WeatherData wd = trainYData.get(i);
			ArrayList<Feature> frs = wd.getFeatures();
			List fr_vals = frs.get(0).getValues();
			for(int j=0;j<fr_vals.size();j++)
			{
				String fr_val = (String)fr_vals.get(i);
				if(fr_val == "Rain")
				{
					  rainYesCount++;				  
				}
				
			}			
		}
		if(isRain)
		{
			return rainYesCount;
		}
		else
		{
			return (total_cnt - rainYesCount);
		}
	}
	private double getInformationGain(double x,double y)
	{
		double log_x = log(x,2);
		double log_y = log(y,2);
		double inf_gain = -((x*log_x)+(y*log_y));
		return inf_gain;
	}
	private double log(double x, int base)
	{
	    return (Math.log(x) / Math.log(base));
	}
	/*private HashMap<Integer, WeatherData> sort_trainingData(
			HashMap<Integer, WeatherData> trainDataXMap, Feature attrb) {
		Set<Entry<Integer, WeatherData>> set = trainDataXMap.entrySet();
		List<Entry<Integer, WeatherData>> list = new ArrayList<Entry<Integer, WeatherData>>(
				set);
		Collections.sort(list,
				new Comparator<Map.Entry<Integer, WeatherData>>() {
					public Integer compare(Map.Entry<Integer, WeatherData> o1,
							Map.Entry<Integer, WeatherData> o2) {
						for (Feature wd : o1.getValue().getFeatures()) {
							if (wd.getName() == "Mean TemperatureF") {
								ArrayList<Feature> o2Features = o2.getValue()
										.getFeatures();
								for (Feature f : o2Features) {
									if (f.getName() == "Mean TemperatureF") {
										Integer o1Val = (Integer) f.getValues()
												.get(0);
										Integer o2Val = (Integer) wd
												.getValues().get(0);

										return (o1Val.compareTo(o2Val));
									}
								}

							}
						}

					}
				});
		return list;
	}*/
}
